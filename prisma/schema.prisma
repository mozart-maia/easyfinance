// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String
  password  String
  Balance   Balance[]
  Savings   Savings[]
  Categories Categories[]
  Income Income[]
  Expense Expense[]
}


model Balance {
  id        Int     @id @default(autoincrement())
  value     Decimal
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Savings {
  id        Int     @id @default(autoincrement())
  value     Decimal
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Categories {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  Income      Income[]
  Expense     Expense[]
}

model Income {
  id          Int        @id @default(autoincrement())
  value       Decimal
  date        DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  category    Categories @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model Expense {
  id          Int        @id @default(autoincrement())
  value       Decimal
  date        DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  category    Categories @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User    @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
